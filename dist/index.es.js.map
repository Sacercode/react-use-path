{"version":3,"file":"index.es.js","sources":["../src/index.js"],"sourcesContent":["\r\nimport { useState } from \"react\";\r\n\r\nexport const usePath = (onMove) => {\r\n    const [currentPath, setCurrentPath] = useState([]);\r\n\r\n    const currentPathString = currentPath.join(\"/\");\r\n\r\n    function goBack(index) {\r\n        if(typeof index === \"number\" && index >= 0) {\r\n            var tmp = [...currentPath];\r\n            while(tmp.length - 1 > index && tmp.length > 0) {\r\n                tmp.pop();\r\n            }\r\n            setCurrentPath(tmp);\r\n            if (typeof onMove == \"function\") {\r\n                onMove(tmp);\r\n            }\r\n        } else if (currentPath.length > 0) {\r\n            const tmp = [...currentPath];\r\n            tmp.pop();\r\n            setCurrentPath(tmp);\r\n            if (typeof onMove == \"function\") {\r\n                onMove(tmp);\r\n            }\r\n        }\r\n    }\r\n\r\n    function customSetCurrentPath(value) {\r\n        let processedValue;\r\n\r\n        if ([false, true, null, undefined].includes(value)) {\r\n            processedValue = [];\r\n        } else if (typeof value === \"string\") {\r\n            processedValue = value === \"\" ? [] : value.split(\"/\");\r\n        } else if (\r\n            typeof value === \"number\" || typeof value === \"bigint\"\r\n            || (\r\n                typeof value === \"object\" && !Array.isArray(value)\r\n            ) \r\n        ) {\r\n            processedValue = [value];\r\n        } else {\r\n            processedValue = value;\r\n        }\r\n        \r\n        setCurrentPath(processedValue);\r\n        if (typeof onMove == \"function\") {\r\n            onMove(processedValue);\r\n        }\r\n    }\r\n\r\n    function goHome() {\r\n        setCurrentPath([]);\r\n        if (typeof onMove == \"function\") {\r\n            onMove([]);\r\n        }\r\n    }\r\n\r\n    function goTo(path) {\r\n        if(typeof path === \"string\" && path.length) {\r\n            let newCurrentPath;\r\n            \r\n            // Si le chemin commence par \"/\", c'est un chemin absolu\r\n            if (path.startsWith(\"/\")) {\r\n                newCurrentPath = [];\r\n                // On enlève le \"/\" initial pour le traitement\r\n                path = path.substring(1);\r\n            } else {\r\n                // Chemin relatif, on part du chemin actuel\r\n                newCurrentPath = [...currentPath];\r\n            }\r\n    \r\n            if (arguments.length > 1) {\r\n                for(var i = 0; i < arguments.length; i++) {\r\n                    const argument = arguments[i];\r\n                    newCurrentPath.push(argument);\r\n                }\r\n            } else if(typeof path == \"string\") {\r\n                // Seulement si il reste quelque chose après avoir enlevé le \"/\" initial\r\n                if (path.length > 0) {\r\n                    path.split(\"/\").forEach(\r\n                        (ressource) => {\r\n                            if (ressource === \"..\") {\r\n                                newCurrentPath.pop();\r\n                            } else if (ressource !== \".\" && ressource !== \"\") {\r\n                                newCurrentPath.push(ressource);\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            \r\n            setCurrentPath(newCurrentPath);\r\n            if (typeof onMove == \"function\") {\r\n                onMove(newCurrentPath);\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        currentPath,\r\n        currentPathString,\r\n        setCurrentPath: customSetCurrentPath,\r\n        goTo,\r\n        goBack,\r\n        goHome,\r\n    };\r\n}"],"names":["usePath","onMove","currentPath","setCurrentPath","useState","currentPathString","goBack","index","tmp","customSetCurrentPath","value","processedValue","goHome","goTo","path","newCurrentPath","i","argument","ressource"],"mappings":";AAGY,MAACA,IAAU,CAACC,MAAW;AAC/B,QAAM,CAACC,GAAaC,CAAc,IAAIC,EAAS,CAAA,CAAE,GAE3CC,IAAoBH,EAAY,KAAK,GAAG;AAE9C,WAASI,EAAOC,GAAO;AACnB,QAAG,OAAOA,KAAU,YAAYA,KAAS,GAAG;AAExC,eADIC,IAAM,CAAC,GAAGN,CAAW,GACnBM,EAAI,SAAS,IAAID,KAASC,EAAI,SAAS;AACzC,QAAAA,EAAI,IAAG;AAEX,MAAAL,EAAeK,CAAG,GACd,OAAOP,KAAU,cACjBA,EAAOO,CAAG;AAAA,IAElB,WAAWN,EAAY,SAAS,GAAG;AAC/B,YAAMM,IAAM,CAAC,GAAGN,CAAW;AAC3B,MAAAM,EAAI,IAAG,GACPL,EAAeK,CAAG,GACd,OAAOP,KAAU,cACjBA,EAAOO,CAAG;AAAA,IAElB;AAAA,EACJ;AAEA,WAASC,EAAqBC,GAAO;AACjC,QAAIC;AAEJ,IAAI,CAAC,IAAO,IAAM,MAAM,MAAS,EAAE,SAASD,CAAK,IAC7CC,IAAiB,CAAA,IACV,OAAOD,KAAU,WACxBC,IAAiBD,MAAU,KAAK,CAAA,IAAKA,EAAM,MAAM,GAAG,IAEpD,OAAOA,KAAU,YAAY,OAAOA,KAAU,YAE1C,OAAOA,KAAU,YAAY,CAAC,MAAM,QAAQA,CAAK,IAGrDC,IAAiB,CAACD,CAAK,IAEvBC,IAAiBD,GAGrBP,EAAeQ,CAAc,GACzB,OAAOV,KAAU,cACjBA,EAAOU,CAAc;AAAA,EAE7B;AAEA,WAASC,IAAS;AACd,IAAAT,EAAe,CAAA,CAAE,GACb,OAAOF,KAAU,cACjBA,EAAO,CAAA,CAAE;AAAA,EAEjB;AAEA,WAASY,EAAKC,GAAM;AAChB,QAAG,OAAOA,KAAS,YAAYA,EAAK,QAAQ;AACxC,UAAIC;AAYJ,UATID,EAAK,WAAW,GAAG,KACnBC,IAAiB,CAAA,GAEjBD,IAAOA,EAAK,UAAU,CAAC,KAGvBC,IAAiB,CAAC,GAAGb,CAAW,GAGhC,UAAU,SAAS;AACnB,iBAAQc,IAAI,GAAGA,IAAI,UAAU,QAAQA,KAAK;AACtC,gBAAMC,IAAW,UAAUD,CAAC;AAC5B,UAAAD,EAAe,KAAKE,CAAQ;AAAA,QAChC;AAAA,UACG,CAAG,OAAOH,KAAQ,YAEjBA,EAAK,SAAS,KACdA,EAAK,MAAM,GAAG,EAAE;AAAA,QACZ,CAACI,MAAc;AACX,UAAIA,MAAc,OACdH,EAAe,IAAG,IACXG,MAAc,OAAOA,MAAc,MAC1CH,EAAe,KAAKG,CAAS;AAAA,QAErC;AAAA,MACxB;AAIY,MAAAf,EAAeY,CAAc,GACzB,OAAOd,KAAU,cACjBA,EAAOc,CAAc;AAAA,IAE7B;AAAA,EACJ;AAEA,SAAO;AAAA,IACH,aAAAb;AAAA,IACA,mBAAAG;AAAA,IACA,gBAAgBI;AAAA,IAChB,MAAAI;AAAA,IACA,QAAAP;AAAA,IACA,QAAAM;AAAA,EACR;AACA;"}